# .------..------..------..------..------.
# |Z.--. ||S.--. ||H.--. ||R.--. ||C.--. |
# | :(): || :/\: || :/\: || :(): || :/\: |
# | ()() || :\/: || (__) || ()() || :\/: |
# | '--'Z|| '--'S|| '--'H|| '--'R|| '--'C|
# `------'`------'`------'`------'`------'

#
# Settings
#

# Vi keys
bindkey -v

# History
HISTSIZE=10000
SAVEHIST="$HISTSIZE"

#
# Aliases & Scripts
#

# git
alias gaa="git add ."
alias gcm='git commit -m'
alias gsu="git submodule update --remote"
alias gsa="git submodule add"
alias gpush="git push -u origin"
alias gpull="git pull"
alias grb='git rebase'
alias grbc='git rebase --continue'
alias gch='git checkout'
alias grr='git review -R'
alias gwl='git worktree list'
alias glog="git log --graph --topo-order --pretty='%w(100,0,6)%C(yellow)%h%C(bold)%C(black)%d %C(cyan)%ar %C(green)%an%n%C(bold)%C(white)%s %N' --abbrev-commit"

gs() { # Function for interactively switching between branches and PRs
  # Check if the 'gh' command is available and if the user is logged in
  if ! command -v gh &> /dev/null || ! gh auth status &> /dev/null; then
    # If 'gh' is not available, show only local branches
    local branch_only
    branch_only=$(git branch --format='%(refname:short)' | gum choose --header "Select branch (GitHub CLI not available)")

    if [ -n "$branch_only" ]; then
      git switch "$branch_only"
    fi
    return
  fi

  # Combine the list of local branches and open Pull Requests
  local selection
  selection=$((git branch --format='%(refname:short)'; gh pr list --limit 40 --json number,title --jq '.[] | "pr#\(.number) \(.title)"') | \
    gum choose --header "Select a branch or Pull Request" --height 20)

  # Exit if nothing was selected (e.g., by pressing Esc)
  if [ -z "$selection" ]; then
    echo "Cancelled."
    return
  fi

  # Check if the selected item is a Pull Request
  if [[ $selection == pr#* ]]; then
    # Extract the PR number from the string (e.g., from "pr#123 PR Title")
    local pr_number
    pr_number=$(echo "$selection" | sed -E 's/pr#([0-9]+).*/\1/')

    # Switch to the branch associated with the given PR
    echo "Checking out Pull Request #$pr_number..."
    gh pr checkout "$pr_number"
  else
    # If it's not a PR, it's a regular branch
    echo "Switching to branch '$selection'..."
    git switch "$selection"
  fi
}


alias repos='gh repo list --limit 100 --json name,owner --jq ".[] | \"\(.owner.login)/\(.name)\"" | gum filter --placeholder "Wybierz repozytorium..." | xargs gh repo view'

# eza (modern ls replacement)
alias ls="eza --icons"
alias ll="eza -l --icons"
alias l="eza -l -a --icons"

alias tree="eza -l -a --icons --tree --ignore-glob='.git'"
alias tre="eza -l -a --icons --tree --level 2 --ignore-glob='.git'"

# bat (modern cat replacement)
alias cat="bat -pp"
alias less="bat --paging=always"

alias catn="/bin/cat"

# zoxide (modern cd replacement)
alias cd="z"

alias ..="z .."
alias ...="z ../.."
alias ....="z ../../.."
alias .....="z ../../../.."
alias ......="z ../../../../.."

# kitty terminal
alias icat="kitty +kitten icat"
alias connect="kitty +kitten ssh"

# neovim
alias v="nvim"
alias vi="nvim"
alias nano="nvim"

# vscodium
alias vs="code"
alias vsc="code ."

# Nix
alias x='nix run .'
alias nd='nix develop'

# direnv
alias da='direnv allow'
alias dda='direnv disallow'

# hexyl (modern hexdump replacement)
hexdump() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: path to file (options)"
    else
      hexyl "${@}"
  fi
}

header() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: path to file (options)"
    else
      hexyl "${@}" | head -n 20
  fi
}

# nmap
nmap-default() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: nmap-default ip (options)"
    else
      [ ! -d "./nmap" ] && echo "[i] Creating $(pwd)/nmap..." && mkdir nmap
      sudo nmap -sCV -T4 --min-rate 10000 "${@}" -v -oA nmap/tcp_default
  fi
}

nmap-udp() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: nmap-udp ip (options)"
    else
      [ ! -d "./nmap" ] && echo "[i] Creating $(pwd)/nmap..." && mkdir nmap
      sudo nmap -sUCV -T4 --min-rate 10000 "${@}" -v -oA nmap/udp_default
  fi
}

# yt-dlp
yt2wav() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a valid link (options)"
    else
      yt-dlp --extract-audio --audio-format wav "${@}"
  fi
}

yt2mp3() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a valid link (options)"
    else
      yt-dlp --extract-audio --audio-format mp3 "${@}"
  fi
}

yt2mp4() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a valid link (options)"
    else
      yt-dlp -S res,ext:mp4:m4a --recode mp4 "${@}"
  fi
}

# nushell
get() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a valid link (options)"
    else
      nu -c "http get '$1'"
  fi
}

db-query() {
  if [ $# -lt 2 ]; then
    echo "Usage: <database_file> \"<sql_query>\""
  fi
  nu -c "open $1 | query db \"$2\""
}

# mental issues
alias lcs="clear"
alias cleare ="clear"
alias clea="clear"
alias cear="clear"
alias lcear="clear"
alias clera="clear"
alias celar="clear"
alias cler="clear"
alias claer="clear"
alias clearc="clear"
alias cleawr="clear"
alias caler="clear"
alias calar="clear"
alias cclear="clear"
alias rclear="clear"
alias rlear="clear"
alias rclear="clear"
alias rcle="clear"
alias rcler="clear"
alias cls="clear"
alias csl="clear"

# others
alias o="orb"
alias j="just"
alias df="duf"
alias rr="ranger"
alias rel="source ~/.zshrc"
alias gdb="gdb --quiet"
alias cds="du -h --max-depth=1 ."
alias pyreq="pip freeze > requirements.txt"
alias www="sudo python3 -m http.server 80"
alias tcp-server="cd /tmp/ && while :; do nc -l -p 4444 | tee  output.log; sleep 1; done"
alias fcd='z $(fd --type d --hidden --exclude .git --exclude node_module --exclude .cache --exclude .npm --exclude .mozilla --exclude .meteor --exclude .nv --exclude .direnv | fzf)'
alias ai="gemini --sandbox"
alias burl='curl -x http://127.0.0.1:8080/ -k'
alias pdfr='zathura "$(gum choose *.pdf)"'
alias cowsay='fortune literature | cowsay'
alias px='pet exec'

spider() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a valid domain"
    else
      printf "${@}" | gau
  fi
}

apuntes() { #Viva EspaÃ±a!
  local search_dir=~/CloudSync

  if [ ! -d "$search_dir" ]; then
    echo "Error: Directory not found: $search_dir"
    return 1
  fi

  local relative_path
  relative_path=$(fd --type f --extension md --extension pdf . --base-directory "$search_dir" | gum choose --height 20)

  if [[ -n "$relative_path" ]]; then
    local full_path="$search_dir/$relative_path"

    case "$full_path" in
      *.md)
        glow "$full_path"
        ;;
      *.pdf)
        zathura "$full_path" >/dev/null 2>&1 &
        ;;
      *)
        echo "Unsupported file type: $full_path"
        ;;
    esac
  fi
}


tm() {
	# Attach to the session named after the user, creating it if it doesn't exist.
	tmux attach-session -t "$USER" &>/dev/null || tmux new-session -s "$USER"
}

tmn() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a session name"
    else
      tmux new -s "${@}"
  fi
}

leenks() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a file"
    else
      local input="$1"
      local output="${input}-links"
      awk '{for(i=1;i<=NF;i++) if ($i ~ /^https?:\/\//) print $i}' "$input" > "$output"
  fi
}

dff() {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: Enter a file"
    else
      local input="$1"
      local output="dalfox-${input}"
      dalfox file "$input" > "$output"
  fi
}

#
# Paths & variables
#

# tools
export PATH="$PATH:$HOME/.local/bin/"

# cargo
export PATH="$PATH:$HOME/.cargo/bin/"

# go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# terminal
export TERM=xterm-256color

# bat theme
export BAT_THEME="Catppuccin Mocha"

# nix config
export NIX_CONF_DIR=$HOME/.config/nix

#
# Zplug
#

source ~/.zplug/init.zsh

# Make sure to use double quotes
zplug "zsh-users/zsh-history-substring-search"

# Use the package as a command
# And accept glob patterns (e.g., brace, wildcard, ...)
zplug "Jxck/dotfiles", as:command, use:"bin/{histuniq,color}"

# Disable updates using the "frozen" tag
zplug "k4rthik/git-cal", as:command, frozen:1

# direnv
zplug "ptavares/zsh-direnv"

# Run a command after a plugin is installed/updated
# Provided, it requires to set the variable like the following:
# ZPLUG_SUDO_PASSWORD="********"
zplug "jhawthorn/fzy", \
    as:command, \
    rename-to:fzy, \
    hook-build:"make && sudo make install"

# Supports checking out a specific branch/tag/commit
zplug "b4b4r07/enhancd", at:v1
zplug "mollifier/anyframe", at:4c23cb60

# Can manage gist file just like other packages
zplug "b4b4r07/79ee61f7c140c63d2786", \
    from:gist, \
    as:command, \
    use:get_last_pane_path.sh

# Rename a command with the string captured with `use` tag
zplug "b4b4r07/httpstat", \
    as:command, \
    use:'(*).sh', \
    rename-to:'$1'

# Syntax highlighting
zplug "zsh-users/zsh-syntax-highlighting", defer:2

# Set the priority when loading
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load #--verbose

#
# Syntax highlighting theme
#

# catppuccin theme
source ~/.config/zshrc/zsh/theme/catppuccin_mocha-zsh-syntax-highlighting.zsh

#
# Homebrew
#


# init homebrew
if [ -x /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

#
# Prompt
#

# init starship
eval "$(starship init zsh)"

function zle-line-init zle-keymap-select {
  RPS1="${${KEYMAP/vicmd}/(main|viins)}"
  RPS2=$RPS1
  zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

#
# Zoxide
#

# init zoxide
eval "$(zoxide init zsh)"


#
# Nix
#

# nix things
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then . ~/.nix-profile/etc/profile.d/nix.sh; fi

if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi

#
# Wise words
#


# Nelson Mandela
if command -v gum &> /dev/null; then
  gum style \
	--foreground 212 --border-foreground 212 --border double \
	--align center --width 50 --margin "1 2" --padding "2 4" \
	'"Education is the most powerful weapon which you can use to change the world."' '~Nelson Mandela'
fi
